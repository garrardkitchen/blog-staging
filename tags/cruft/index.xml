<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Garrard Kitchen – Cruft</title><link>https://blog-dev.garrardkitchen.com/tags/cruft/</link><description>Recent content in Cruft on Garrard Kitchen</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 09 Jan 2022 15:36:45 +0000</lastBuildDate><atom:link href="https://blog-dev.garrardkitchen.com/tags/cruft/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Action Workflow Starter</title><link>https://blog-dev.garrardkitchen.com/blog/github-action-workflow-starter/</link><pubDate>Sun, 09 Jan 2022 15:36:45 +0000</pubDate><guid>https://blog-dev.garrardkitchen.com/blog/github-action-workflow-starter/</guid><description>
&lt;p>In this post, I share practical insights on how to simplify and streamline your CI/CD processes using GitHub Actions. The focus is on reducing complexity, minimizing effort, and making it easier for teams to adopt new workflows with less cognitive overhead.&lt;/p>
&lt;h2>Background&lt;span class="hx-absolute -hx-mt-20" id="background">&lt;/span>
&lt;a href="#background" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>During our migration from on-premise infrastructure to Azure, I had the opportunity to revisit and redesign our CI/CD pipelines. My guiding principle throughout this process was to keep things as simple as possible, always returning to first principles when evaluating tooling and process changes. GitHub Actions emerged as a strong candidate for our needs, offering flexibility and ease of use.&lt;/p>
&lt;h2>Previous Experience&lt;span class="hx-absolute -hx-mt-20" id="previous-experience">&lt;/span>
&lt;a href="#previous-experience" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Before joining Carfinance 247, I worked with BitBucket Pipelines to build and deploy cloud-native solutions. I appreciated how this approach kept everything related to a solution in one place, reducing the need to learn or maintain additional systems. My early access to GitHub Actions further reinforced my preference for integrated, developer-friendly tooling.&lt;/p>
&lt;h2>An anecdote&lt;span class="hx-absolute -hx-mt-20" id="an-anecdote">&lt;/span>
&lt;a href="#an-anecdote" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>During my time working with different teams, there have been moments of differing opinions about tooling choices. For example, when GitHub Actions was adopted, some colleagues remarked on my enthusiasm for the platform. For me, the motivation has always been to select tools and processes that best serve the needs of the organization and the development team as a whole. Like many in the industry, I also enjoy exploring new technologies and working on side projects in my own time—it&amp;rsquo;s a common way for developers to learn and grow outside of their day-to-day responsibilities.&lt;/p>
&lt;h2>Tooling Landscape&lt;span class="hx-absolute -hx-mt-20" id="tooling-landscape">&lt;/span>
&lt;a href="#tooling-landscape" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>At Carfinance 247, we have used a variety of CI/CD tools, including Bamboo, Azure DevOps, and GitHub Actions. Over time, we found that Bamboo was no longer meeting our needs due to reliability and performance issues. Azure DevOps, while powerful, introduced additional complexity with service connections, permissions, and configuration overhead. GitHub Actions, on the other hand, provided a more streamlined experience, even though some advanced features are only available on the Enterprise plan.&lt;/p>
&lt;div class="hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-yellow-100 hx-bg-yellow-50 hx-text-yellow-900 dark:hx-border-yellow-200/30 dark:hx-bg-yellow-700/30 dark:hx-text-yellow-200">
&lt;div class="ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2">&lt;div class="hx-select-none hx-text-xl" style="font-family: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';">⚠️&lt;/div>&lt;/div>
&lt;div class="hx-w-full hx-min-w-0 hx-leading-7">
&lt;div class="hx-mt-6 hx-leading-7 first:hx-mt-0">We have also learned that Azure DevOps is not on Microsoft&amp;rsquo;s long-term roadmap.&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2>Creating a GitHub Actions Workflow Starter&lt;span class="hx-absolute -hx-mt-20" id="creating-a-github-actions-workflow-starter">&lt;/span>
&lt;a href="#creating-a-github-actions-workflow-starter" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>GitHub offers excellent documentation for creating workflow starters. You can find a helpful guide here: &lt;a href="https://docs.github.com/en/actions/learn-github-actions/creating-starter-workflows-for-your-organization" target="_blank" rel="noopener">create a starter&lt;/a>&lt;/p>
&lt;p>This screenshot is demonstrative of the simplicity of what little you need to do to have a starter to share across your organisation:&lt;/p>
&lt;p>&lt;img src="../img/2022-01-09-15-48-03.png" alt="" loading="lazy" />&lt;/p>
&lt;p>To create a workflow starter, set up a public repository named &lt;code>.github&lt;/code> with a &lt;code>workflow-templates&lt;/code> folder. Place your starter Action YAML files there—each can have an associated &lt;code>*.properties.json&lt;/code> file to provide metadata and control when the starter is suggested. File patterns in the properties file allow you to offer relevant starters based on the contents of a repository.&lt;/p>
&lt;p>Essentially you&amp;rsquo;re creating a public repository named &lt;code>.github&lt;/code> with a folder named &lt;code>workflow-templates&lt;/code>. Contained within is your starter Action .yaml file. You can have many. Each Action file needs to have an associated &lt;code>*.properties.json&lt;/code> file that labels and describes your starter. What adds to the depth of the relatively simple yet powerful feature is the ability to add intelligence to what starters are offered up to the author when creating an Action. This is made possible by the use of &lt;strong>filepatterns&lt;/strong>. Anything that matches a file pattern in the &lt;code>root&lt;/code> will predicate whether that starter is offered up or not. Clever hey? I&amp;rsquo;ve included a sample &lt;code>*.properties.json&lt;/code> for context below:&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Deploy Workflow&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;description&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;Deploy to AKS&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;iconName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;azure-icon&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;categories&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;csharp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filePatterns&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;package.json$&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;^Dockerfile&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;.*\\.md$&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>When creating a new Action workflow, GitHub will suggest appropriate starters based on these patterns, making it easier for teams to get started quickly and consistently:&lt;/p>
&lt;p>&lt;img src="../img/2022-01-09-15-47-17.png" alt="" loading="lazy" />&lt;/p>
&lt;h2>Benefits of Workflow Starters&lt;span class="hx-absolute -hx-mt-20" id="benefits-of-workflow-starters">&lt;/span>
&lt;a href="#benefits-of-workflow-starters" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Workflow starters reduce the need for extensive documentation or step-by-step guides, especially when migrating many applications. By providing ready-to-use templates, you lower the barrier to entry, encourage best practices, and help teams focus on delivering value rather than wrestling with configuration.&lt;/p>
&lt;hr>
&lt;p>&lt;sup>1&lt;/sup> The Enterprise plan allows you to create private &lt;code>.github&lt;/code> repositories, which is useful for referencing secrets securely. If you&amp;rsquo;re not on the Enterprise plan, consider documenting how to handle secrets in your starter templates, using placeholders that can be replaced as needed.&lt;/p>
&lt;p>&lt;sup>2&lt;/sup> My preference is to keep documentation close to the code, using READMEs and markdown files within the repository to support onboarding and knowledge sharing.&lt;/p></description></item></channel></rss>