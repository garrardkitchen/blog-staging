<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Garrard Kitchen â€“ Code Quality</title><link>https://blog-dev.garrardkitchen.com/tags/code-quality/</link><description>Recent content in Code Quality on Garrard Kitchen</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Jul 2024 08:18:24 +0100</lastBuildDate><atom:link href="https://blog-dev.garrardkitchen.com/tags/code-quality/index.xml" rel="self" type="application/rss+xml"/><item><title>What is the Inner Loop?</title><link>https://blog-dev.garrardkitchen.com/blog/inner-loop/</link><pubDate>Sat, 06 Jul 2024 08:18:24 +0100</pubDate><guid>https://blog-dev.garrardkitchen.com/blog/inner-loop/</guid><description>
&lt;p>This post explores the concept of the Inner Loop in software development, emphasizing its importance in enhancing productivity, reducing feedback delays, and improving code quality. It provides practical examples and tools to optimize the inner loop, ensuring a more efficient and enjoyable development process.&lt;/p>
&lt;h2>What is the Inner-loop?&lt;span class="hx-absolute -hx-mt-20" id="what-is-the-inner-loop">&lt;/span>
&lt;a href="#what-is-the-inner-loop" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>The &amp;ldquo;Inner Loop&amp;rdquo; in software development refers to the set of activities and processes a developer repeatedly goes through while writing, testing, and debugging code in the development phase, before committing changes to a version control system. This loop typically includes writing code, compiling, running, testing locally, and debugging. The goal of optimizing the inner loop is to maximize developer productivity and satisfaction by making these activities as efficient and frictionless as possible.&lt;/p>
&lt;p>As described by Gene Kim in his book called, &amp;ldquo;DevOps Handbook&amp;rdquo;, &lt;em>the 2nd Way&lt;/em>, you optimize for fast feedback (from right to left). Building and testing locally, does contribute towards this 2nd way but we can do more, and often do, to provide additional feedback. I will expand on this shortly.&lt;/p>
&lt;h2>Why is this important?&lt;span class="hx-absolute -hx-mt-20" id="why-is-this-important">&lt;/span>
&lt;a href="#why-is-this-important" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>I&amp;rsquo;ve summarized the importance of the inner loop here:&lt;/p>
&lt;ul>
&lt;li>Maximizing inner-loop time boosts productivity and personal satisfaction for developers.&lt;/li>
&lt;li>Fix bugs before integrating your changes into the mainline branch.&lt;/li>
&lt;li>Reducing outer-loop friction (through better tooling and automation) to minimize disruptions.&lt;/li>
&lt;li>Improved Code Quality&lt;/li>
&lt;li>Faster Time to Market&lt;/li>
&lt;li>Enhanced Collaboration&lt;/li>
&lt;li>Reduced Context Switching&lt;/li>
&lt;/ul>
&lt;p>I will now expand on the above list:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Maximizing inner-loop time boosts productivity and personal satisfaction for developers&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>The inner loop is where developers spend most of their time. By optimizing this phase, developers can focus on creative problem-solving and writing high-quality code without unnecessary interruptions. For example, using tools like hot-reloading in frameworks such as React or .NET can significantly reduce the time spent waiting for changes to reflect during development. This not only enhances productivity but also contributes to job satisfaction, as developers can see the immediate impact of their work.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Fix bugs before integrating your changes into the mainline branch.&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Catching and fixing bugs early in the inner loop prevents them from propagating to later stages of development, where they become more costly and time-consuming to address. For instance, running unit tests locally before committing code ensures that basic functionality is intact. Tools like Jest for JavaScript or NUnit for .NET can automate this process, providing instant feedback and reducing the risk of introducing defects into the mainline branch.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Reducing outer-loop friction&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Outer-loop activities, such as code reviews and CI/CD pipeline executions, often introduce delays. By addressing issues in the inner loop, developers can minimize the need for rework and streamline the transition to the outer loop. For example, using static code analysis tools like SonarQube or Qodana during development can catch code quality issues early, reducing the burden on code reviewers and speeding up the overall development process.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Improved Code Quality&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>By focusing on the inner loop, developers can ensure that their code meets high standards before it is shared with the team. This includes adhering to best practices, following coding standards, and using tools like linters and formatters to maintain consistency. High-quality code is easier to maintain, extend, and debug, reducing technical debt in the long run.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Faster Time to Market&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Optimizing the inner loop accelerates the development process, enabling teams to deliver features and fixes more quickly. This is particularly important in competitive industries where time to market can be a critical factor in success. By reducing delays and inefficiencies, teams can respond to user needs and market demands more effectively.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Enhanced Collaboration&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>When developers address issues in the inner loop, they reduce the burden on code reviewers and other team members. This fosters a more collaborative environment, as team members can focus on higher-level concerns rather than fixing basic issues. It also improves the overall workflow, making it easier for teams to work together efficiently.&lt;/p>
&lt;ul>
&lt;li>&lt;em>Reduced Context Switching&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Immediate feedback in the inner loop helps developers stay focused on their tasks. When issues are identified and resolved quickly, developers can avoid the cognitive load of switching between different tasks or revisiting code they wrote days or weeks earlier. This leads to a more seamless and productive development experience.&lt;/p>
&lt;h2>How can you provide more feedback?&lt;span class="hx-absolute -hx-mt-20" id="how-can-you-provide-more-feedback">&lt;/span>
&lt;a href="#how-can-you-provide-more-feedback" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>As alluded to at the end of the opening section, there are more ways you can provide feedback:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SAST (Static Application Security Testing):&lt;/strong> Tools like Snyk or Checkmarx can identify security vulnerabilities in your code during the inner loop, allowing you to address them before they become critical.&lt;/li>
&lt;li>&lt;strong>Analyzers:&lt;/strong> Linters and code analyzers, such as ESLint for JavaScript or Roslyn analyzers for .NET, can enforce coding standards and highlight potential issues in real-time.&lt;/li>
&lt;li>&lt;strong>Standards:&lt;/strong> Adopting and adhering to coding standards ensures consistency and maintainability across the codebase. For example, using a style guide like PEP 8 for Python or the Google Java Style Guide can help maintain high-quality code.&lt;/li>
&lt;li>&lt;strong>CI Feature Pipeline:&lt;/strong> Setting up a lightweight CI pipeline that runs essential tests and checks during the inner loop can provide immediate feedback. For instance, GitHub Actions can be configured to run unit tests and linters on every pull request, ensuring that only high-quality code is merged.&lt;/li>
&lt;/ul>
&lt;h2>Sustainability and Reduced Feedback Delays&lt;span class="hx-absolute -hx-mt-20" id="sustainability-and-reduced-feedback-delays">&lt;/span>
&lt;a href="#sustainability-and-reduced-feedback-delays" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Optimizing the inner loop also contributes to sustainability in software development. By reducing the time and resources spent on fixing issues in later stages, teams can focus on delivering value to users. For example, addressing performance bottlenecks during development can lead to more efficient applications, reducing energy consumption and operational costs.&lt;/p>
&lt;p>Moreover, reducing feedback delays is crucial for maintaining momentum and avoiding context-switching. When developers receive immediate feedback, they can address issues while the context is still fresh in their minds. This not only improves the quality of the code but also accelerates the development process, enabling teams to meet deadlines and deliver features faster.&lt;/p>
&lt;h2>Examples of Inner Loop Optimization&lt;span class="hx-absolute -hx-mt-20" id="examples-of-inner-loop-optimization">&lt;/span>
&lt;a href="#examples-of-inner-loop-optimization" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;ol>
&lt;li>&lt;strong>Hot Module Replacement (HMR):&lt;/strong> Frameworks like React and Vue.js support HMR, allowing developers to see changes in real-time without refreshing the entire application.&lt;/li>
&lt;li>&lt;strong>Integrated Debugging:&lt;/strong> Modern IDEs like Visual Studio Code and JetBrains Rider provide integrated debugging tools, enabling developers to identify and fix issues quickly.&lt;/li>
&lt;li>&lt;strong>Local Test Execution:&lt;/strong> Running tests locally using tools like pytest for Python or Mocha for JavaScript ensures that code changes do not break existing functionality.&lt;/li>
&lt;li>&lt;strong>Pre-commit Hooks:&lt;/strong> Tools like Husky can enforce code quality checks and run tests before code is committed, preventing issues from entering the version control system.&lt;/li>
&lt;li>&lt;strong>.NET Aspire:&lt;/strong> This tool is specifically designed to enhance the inner loop for .NET developers. By integrating features like real-time code analysis, dependency management, and performance profiling, .NET Aspire helps developers identify and resolve issues early in the development process. For example, its built-in analyzers can highlight potential performance bottlenecks or security vulnerabilities as you write code, ensuring that your application is both efficient and secure. Additionally, .NET Aspire&amp;rsquo;s seamless integration with popular IDEs like Visual Studio makes it an invaluable asset for streamlining the inner loop.&lt;/li>
&lt;/ol>
&lt;p>By implementing these practices and tools, teams can create a more efficient and enjoyable development experience, ultimately leading to better software and happier developers.&lt;/p>
&lt;h2>Challenges and Solutions&lt;span class="hx-absolute -hx-mt-20" id="challenges-and-solutions">&lt;/span>
&lt;a href="#challenges-and-solutions" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Optimizing the inner loop is not without its challenges. Developers often face issues such as slow build times, lack of proper tooling, or resistance to adopting new practices. Here are some solutions:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Slow Build Times:&lt;/strong> Use incremental builds and caching mechanisms to speed up the process. Tools like Webpack or Bazel can help optimize build times.&lt;/li>
&lt;li>&lt;strong>Lack of Proper Tooling:&lt;/strong> Invest in modern IDEs and plugins that support features like real-time code analysis and debugging.&lt;/li>
&lt;li>&lt;strong>Resistance to Change:&lt;/strong> Provide training and demonstrate the benefits of inner loop optimization to encourage adoption.&lt;/li>
&lt;/ul>
&lt;h2>Metrics for Success&lt;span class="hx-absolute -hx-mt-20" id="metrics-for-success">&lt;/span>
&lt;a href="#metrics-for-success" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>To measure the effectiveness of inner loop optimization, consider tracking the following metrics:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Build and Test Times:&lt;/strong> Monitor how long it takes to build and test code locally.&lt;/li>
&lt;li>&lt;strong>Bug Detection Rate:&lt;/strong> Track the number of bugs caught during the inner loop versus later stages.&lt;/li>
&lt;li>&lt;strong>Developer Satisfaction:&lt;/strong> Conduct surveys to gauge how developers feel about their workflow and tools.&lt;/li>
&lt;/ul>
&lt;h2>Future Trends&lt;span class="hx-absolute -hx-mt-20" id="future-trends">&lt;/span>
&lt;a href="#future-trends" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>Emerging technologies are set to revolutionize the inner loop. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AI-Assisted Development:&lt;/strong> Tools like GitHub Copilot can suggest code snippets and automate repetitive tasks, further streamlining the inner loop.&lt;/li>
&lt;li>&lt;strong>Cloud-Based Development Environments:&lt;/strong> Platforms like GitHub Codespaces allow developers to work in pre-configured environments, reducing setup time and ensuring consistency across teams.&lt;/li>
&lt;/ul></description></item><item><title>Runtimes</title><link>https://blog-dev.garrardkitchen.com/blog/runtimes/</link><pubDate>Sat, 08 Jan 2022 11:09:12 +0000</pubDate><guid>https://blog-dev.garrardkitchen.com/blog/runtimes/</guid><description>
&lt;p>In my current role as Head of Cloud Platform, I am leading the technical effort of migrating our entire on-premise real-estate to Azure. Part of this mission, is to upgrade the runtimes of our applications, regardless of their current placement; IIS Web apps, Windows Services and Docker Swarm containers. I say &amp;ldquo;part of this mission&amp;rdquo; as another aspect of this migration is to create a new foundation for our platform - AKS. I hope to cover more on this in later posts.&lt;/p>
&lt;p>With being deliberately ambiguous on actual numbers here, we have a &lt;em>fair&lt;/em> amount of workloads that are running on runtimes that have surpassed their end-of-life support status ðŸ˜±. I am sure we&amp;rsquo;re not the only organization that finds itself in this predicament. One of the first things our CTO wanted when he came onboard was for us to sort out our runtimes.&lt;/p>
&lt;p>What this means is that we have .NET Framework and .NET Core workloads that need to be migrated to a runtime that is not out of support (now or anytime soon). At the same time, the target runtime has to have hit the mature (at least on it&amp;rsquo;s 1st minor release) status. .NET 6.0 is now GA but it&amp;rsquo;s paint is still a little wet. Understandably there is some concern, borderline trepidation towards targeting this new version. There are impactful benefits (improved performance, greater stability, improved GC, cost benefits resulting from being more perfomant, less vulnerabilities, improved security, etc&amp;hellip;) and our current runtime target for our .NET Core workloads is 3.1. However, end-of-life support for this particular version is the end of this year - &lt;a href="https://docs.microsoft.com/en-us/lifecycle/products/microsoft-net-and-net-core" target="_blank" rel="noopener">03.Dec.2022&lt;/a>. So, at some point, this upgrade needs to happen. With planning and prioritization, this can happen when appropriate.&lt;/p>
&lt;p>One strategy of delivering confidence with a runtime is to update a few apps, consecutively; providing you&amp;rsquo;ve availability to accommodate such an approach. Timeboxed: (1) A simple (CRUD-esque HTTP API that sits on top of a Db) workload then (2) one that involves an &lt;code>data-in-motion&lt;/code> aspect (message queue, consumer paradigm, non-http api).&lt;/p>
&lt;p>Another approach to reducing concern, mitigating risk, etc&amp;hellip; is to meet with the SME (Subject matter expert) - a Microsoft representative - and listen to what they have to say. I have orchestrated such a meeting - we are being helped/guided by Microsoft FastTrak. The advice received was to upgrade. We were also reminded of the migration paths to take when moving to a target version. Here are some demonstrative links that will help you through this process:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Migration guidance found here âž¡ &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/migration/31-to-60?view=aspnetcore-6.0&amp;amp;tabs=visual-studio" target="_blank" rel="noopener">migrate from asp.net core 3.1 to 6.0&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An example of breaking changes between versions can be found here âž¡ &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/compatibility/3.1" target="_blank" rel="noopener">breaking changes in .NET Core 3.1&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Most of our workloads are simple HTTP API CRUDs that sit aloft databases. In short, we&amp;rsquo;re not doing anything too complicated and so this makes most of our pain points the result of external NuGet package dependencies.&lt;/p>
&lt;p>IMO, it is important to establish, if at all possible, a feedback loop back to Microsoft. If you are fortunate to have an established relationship with Microsoft and have access to certain areas/teams - eg FastTrak, or even a Support plan, if/when issues do arise (eg increased exception frequency, uncharacteristic high latency, poor performance, frequent CG, memory leaks, socket exhaustion, etc&amp;hellip;), you can feed these back and receive remediation advice until a fix (if not a result of poor implementation) becomes available. We had been plagued with issues (socket exhaustion, CG, memory leaks) with those workloads on ASP.NET Core 2.* but now see less issues with those ASP.NET Core workloads that are now on 3.1.&lt;/p>
&lt;p>To complement the above I would also recommend agreeing on, and capturing, metrics that are demonstrative of your gains from the runtime upgrade. This is where metrics come into their own. Generally, metrics tend to have a greater retention period than logs, and therefore can paint an informed picture over a wider span of time than logging can. Generally speaking, lack of memory is going to be more catastrophic than thottling through lack of CPU. When your RSS or working set bytes are depleted, more often than not your application will terminate due to OOM (out of memory) exception - state and workflow blown away unless you&amp;rsquo;ve employed patterns to mitigate against these edge/corner cases - most don&amp;rsquo;t. In particular, I am referring to container_memory_rss and container_memory_working_set_bytes due to working with kubernetes.&lt;/p>
&lt;p>The above is not a definitive list of must do&amp;rsquo;s and in part, is overly simplistic. IMO, it is important to stay current with runtimes to benefit from the improvements they deliver on. For me though, their stability and the vulnerabilities they address is the most important. It is scary how many organizations run on runtimes that are out of support. Applications will still run but ask yourself this, how much is this truly costing your company, how much is it costing our environment and finally, how much could your company suffer because they are exposed to vulnerabilities?&lt;/p>
&lt;p>Sounds overly dramatic doesn&amp;rsquo;t?! I stop there as I don&amp;rsquo;t wish to perpetuate the negativity of going down this particular hole. But before I do; more food for thought. I would like to throw into the mix application dependencies and in particular those package dependencies some of us rely on - NuGet &amp;amp; npm. Good DevOps practices mitigate again licensing or vulnerability scanning but IMO the same level of focus ought to be concentrated into this area as well. This was painfully brought to light recently regarding OSS and the log4j vulnerability - CVE-2021-44228 (common vulnerabilities and exposure). And finally, docker image scanning. There are plenty of solutions out there - Snyk for example - that can help with this. Good docker practices go a long way also toward protecting us against vulnerabilities that arise from images and not forgetting code scanning products generally that identify smelly code, bugs and other vulnerabilities. I have introduced solutions that deal with all of this.&lt;/p></description></item></channel></rss>